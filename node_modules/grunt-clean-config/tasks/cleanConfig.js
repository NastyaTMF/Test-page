/*
 * grunt-clean-config
 * https://github.com/morriswchris/grunt-clean-config
 *
 * Copyright (c) 2014 Chris Morris
 * Licensed under the MIT license.
 */

'use strict';

var _ = require("lodash"),
	colors = require("colors");

module.exports = function(grunt) {

	// Please see the Grunt documentation for more information regarding task
	// creation: http://gruntjs.com/creating-tasks

	grunt.registerMultiTask('cleanConfig', 'A faster, cleaner, less merge conflicting grunt config', function() {
		// Merge task-specific and/or target-specific options with these defaults.
		var options = this.options({
			"location": "./grunt/config", //path to config directory
			"filters": ["*"], //can be string/array of file name(s)/expressions ( ie 'fileone.js|file-*' ) default: all files
			"hiddenFiles": false //should we filter hidden files default: false (as in we should exclude hidden files) 
		});

		//private functions
		function getConfigs(path, filters, hidden) {
			//setup defaults
			var files = [];

			//check our filters to make sure it is an array
			filters = _.isArray(filters) ? filters : [filters];

			//push in filter to not grab our cleanConfig.js
			filters.push('!cleanConfig.js');

			if (!hidden) { //add in a filter to not show hidden files
				filters.push("!.*");
			}

			grunt.log.write("Searching for config files in %s ... ", path.toString().cyan);

			//read in our configs
			files = grunt.file.expand({
				cwd: path
			}, filters);

			//log our findings			
			grunt.log.ok();
			grunt.log.oklns("Found %s %s to be loaded into the grunt config", files.length.toString().green, files.length > 0 && files.length < 2 ? "file" : "files");
			grunt.verbose.writeln("Found the following files %s using the following filters %s", grunt.log.wordlist(files), grunt.log.wordlist(filters));

			return files;
		};

		function processConfigs(path, configs) {

			//set our read conditions
			grunt.file.defaultEncoding = 'utf8';
			grunt.file.setBase(path);

			grunt.log.write("\nStarting to add configs from %s to grunt.config ... ".bold, path.cyan);

			//loop through our config files and load them into the grunt config
			_.each(configs, function(config) {
				var fileContents = grunt.file.read(config);
				if (_.isEmpty(fileContents)) {
					grunt.fail.warn("File " + config + " has no contents. Cannot load into config!");
				}
				else {
					grunt.verbose.write("%s Adding %s to grunt config ... ", ">>".green, config.cyan);
					grunt.config.set(config.split(".")[0], fileContents);
					grunt.verbose.ok();
				}
			});
			grunt.log.ok();
		};

		// Main Program
		//-------------
		//check for location and existance of directory
		if (_.isEmpty(options.location)) {
			grunt.fatal("No location was set. Please configure the location of you grunt config directory in the grunt config options!");
			return;
		}

		if (!grunt.file.exists(options.location)) {
			grunt.fatal("cleanConfig could not find the location of your grunt config directory %s. Please double check your grunt config!", options.location.toString().red);
			return;
		}

		//lets begin
		grunt.log.writeln("Using " + options.location + " to dynamically load all your grunt config.");
		var files = getConfigs(options.location, options.filters);
		processConfigs(options.location, files);
		grunt.log.writeln("Finished loading %s %s", files.length.toString().green, files.length > 0 && files.length < 2 ? "config" : "configs");
	});

};